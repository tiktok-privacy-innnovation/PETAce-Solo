// Copyright 2023 TikTok Pte. Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once

#include <bitset>
#include <cstddef>
#include <cstdint>
#include <memory>

#include "solo/prng.h"
#include "solo/util/defines.h"

namespace petace {
namespace solo {

/**
 * @brief Returns a random byte generated by a given PRNG.
 *
 * @param[in] prng A PRNG to generate randomness from.
 */
SOLO_NODISCARD Byte sample_uniform_byte(PRNG& prng) noexcept;

/**
 * @brief Returns a random 32-bit unsigned integer generated by a given PRNG.
 *
 * @param[in] prng A PRNG to generate randomness from.
 */
SOLO_NODISCARD std::uint32_t sample_uniform_uint32(PRNG& prng) noexcept;

/**
 * @brief Returns a random 64-bit unsigned integer generated by a given PRNG.
 *
 * @param[in] prng A PRNG to generate randomness from.
 */
SOLO_NODISCARD std::uint64_t sample_uniform_uint64(PRNG& prng) noexcept;

/**
 * @brief Generates a given number of random bytes from a given PRNG to a buffer.
 *
 * @param[in] prng A PRNG to generate randomness from.
 * @param[in] byte_count The number of random bytes requested.
 * @param[out] out The buffer that stores the generated randomness.
 * @throws std::invalid_argument if the output buffer is nullptr.
 */
void sample_uniform_byte_array(PRNG& prng, std::size_t byte_count, Byte* out);

/**
 * @brief Generates a given number of random 32-bit unsigned integers from a given PRNG to a buffer.
 *
 * @param[in] prng A PRNG to generate randomness from.
 * @param[in] uint32_count The number of random 32-bit unsigned integers requested.
 * @param[out] out The buffer that stores the generated randomness.
 * @throws std::invalid_argument if the output buffer is nullptr.
 */
void sample_uniform_uint32_array(PRNG& prng, std::size_t uint32_count, std::uint32_t* out);

/**
 * @brief Generates a given number of random 64-bit unsigned integers from a given PRNG to a buffer.
 *
 * @param[in] prng A PRNG to generate randomness from.
 * @param[in] uint64_count The number of random 64-bit unsigned integers requested.
 * @param[out] out The buffer that stores the generated randomness.
 * @throws std::invalid_argument if the output buffer is nullptr.
 */
void sample_uniform_uint64_array(PRNG& prng, std::size_t uint64_count, std::uint64_t* out);

}  // namespace solo
}  // namespace petace
